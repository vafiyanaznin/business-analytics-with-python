{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPcwME50O0NEAOg70JF+Oee",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vafiyanaznin/business-analytics-with-python/blob/main/LinData\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ],
      "metadata": {
        "id": "obfzxaNywTI6"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "dH3v2B-hx_tj"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv('LinData.csv')"
      ],
      "metadata": {
        "id": "EuDubrJ-yEyn"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "eVdWQwZOyRG3",
        "outputId": "967c25f0-2006-42a9-d445-d16975cb0d0b"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Month  StockPrice\n",
              "0      1           3\n",
              "1      2          10\n",
              "2      3          15\n",
              "3      4          12\n",
              "4      5          10\n",
              "5      6          18\n",
              "6      7          21\n",
              "7      8          40\n",
              "8      9          45\n",
              "9     10          40"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22d94749-6421-43c5-84f3-edccd452d7ca\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Month</th>\n",
              "      <th>StockPrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22d94749-6421-43c5-84f3-edccd452d7ca')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-22d94749-6421-43c5-84f3-edccd452d7ca button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-22d94749-6421-43c5-84f3-edccd452d7ca');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = dataset.iloc[:,:-1].values\n",
        "y = dataset.iloc[:,-1].values"
      ],
      "metadata": {
        "id": "a6koUK5Dywn9"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EEGiXQ1P0VIz",
        "outputId": "6b995070-fc26-4642-aebe-c8c7eb2c05a9"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1],\n",
              "       [ 2],\n",
              "       [ 3],\n",
              "       [ 4],\n",
              "       [ 5],\n",
              "       [ 6],\n",
              "       [ 7],\n",
              "       [ 8],\n",
              "       [ 9],\n",
              "       [10]])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DztnySkX0jUG",
        "outputId": "4ee4c4cc-9824-4615-8881-f12237bda73b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 3, 10, 15, 12, 10, 18, 21, 40, 45, 40])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reg = LinearRegression().fit(x, y)"
      ],
      "metadata": {
        "id": "cDr-jZSz0lzR"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ynew=reg.predict(x)"
      ],
      "metadata": {
        "id": "SsUtUm0i0uH_"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ynew"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aU91VUhd0z1e",
        "outputId": "b95617b0-d608-4086-8ab2-62e7c2b699aa"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 1.27272727,  5.74545455, 10.21818182, 14.69090909, 19.16363636,\n",
              "       23.63636364, 28.10909091, 32.58181818, 37.05454545, 41.52727273])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "TJrEnOxd1ZF1"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "TMmxri631h57",
        "outputId": "14df12d2-c2c5-46f8-f273-eafb22dff3ab"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f5ef9119e10>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y)\n",
        "plt.plot(x,ynew)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "BRgG3brr1lcj",
        "outputId": "4304da14-cd86-4553-9db8-80e017bcae30"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f5ef6ac9f90>]"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}